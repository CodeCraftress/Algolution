int findOROfAllSubarrays(const vector<int>& A) {
    unordered_set<int> allOrs; 
    unordered_set<int> currentOrs; 

    for (int i = 0; i < A.size(); i++) {
        unordered_set<int> newOrs;
        
        newOrs.insert(A[i]);
        for (int orVal : currentOrs) {
            newOrs.insert(orVal | A[i]);
        }
        
        currentOrs = newOrs;
        allOrs.insert(newOrs.begin(), newOrs.end());
    }

    
    int result = 0;
    for (int orVal : allOrs) {
        result |= orVal;
    }
    
    return result;
}

int main() {
    vector<int> A = {1, 4, 6};  
    cout << "Result: " << findOROfAllSubarrays(A) << endl;  

    vector<int> B = {10, 100, 1000};  
    cout << "Result: " << findOROfAllSubarrays(B) << endl;  

    return 0;
}
