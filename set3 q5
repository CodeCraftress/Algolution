bool isValid(string s) {
    stack<char> st;
    
    for (char c : s) {
        // If it's an opening bracket, push it to the stack
        if (c == '(' || c == '{' || c == '[') {
            st.push(c);
        }
        // If it's a closing bracket, check for a match
        else {
            if (st.empty()) return false; // Stack is empty, no matching opening bracket
            char top = st.top();
            if ((c == ')' && top == '(') ||
                (c == '}' && top == '{') ||
                (c == ']' && top == '[')) {
                st.pop(); // Valid match, pop from the stack
            } else {
                return false; // Invalid match
            }
        }
    }
    
    // If the stack is empty at the end, it's a valid string
    return st.empty();
}

int main() {
    string s;
    cin >> s;  // Input string containing parentheses and brackets
    cout << (isValid(s) ? "true" : "false") << endl;
    return 0;
}
